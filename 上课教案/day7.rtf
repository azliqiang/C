{\rtf1\ansi\ansicpg936\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 STHeitiSC-Light;\f2\fnil\fcharset0 AndaleMono;
\f3\fnil\fcharset0 SimSun;}
{\colortbl;\red255\green255\blue255;\red217\green11\blue0;\red111\green255\blue36;\red255\green39\blue18;
\red74\green0\blue230;\red0\green186\blue251;}
\paperw11900\paperh16840\margl1440\margr1440\vieww19200\viewh17060\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs48 \cf0 1:
\f1 \'ba\'af\'ca\'fd\'b5\'c4\'b1\'be\'d6\'ca\'a3\'bf\
	scanf		\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa>\'cd\'ea\'b3\'c9\'ca\'e4\'c8\'eb\'b9\'a6\'c4\'dc\
	printf		\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa>\'cd\'ea\'b3\'c9\'ca\'e4\'b3\'f6\'b9\'a6\'c4\'dc\
	getchar	\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa>\'b5\'a5\'b8\'f6\'d7\'d6\'b7\'fb\'ca\'e4\'c8\'eb\'b9\'a6\'c4\'dc\
	putchar	\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa>\'b5\'a5\'b8\'f6\'d7\'d6\'b7\'fb\'ca\'e4\'b3\'f6\'b9\'a6\'c4\'dc\
	gets			\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa>\'d7\'d6\'b7\'fb\'b4\'ae\'b5\'c4\'ca\'e4\'c8\'eb\'b9\'a6\'c4\'dc\
	puts			\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa>\'d7\'d6\'b7\'fb\'b4\'ae\'b5\'c4\'ca\'e4\'b3\'f6\'b9\'a6\'c4\'dc\
	fgets		\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa>\'d7\'d6\'b7\'fb\'b4\'ae\'b5\'c4\'ca\'e4\'c8\'eb\'b9\'a6\'c4\'dc\
	fput			\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa>\'d7\'d6\'b7\'fb\'b4\'ae\'b5\'c4\'ca\'e4\'b3\'f6\'b9\'a6\'c4\'dc\
	strlen		\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa>\'bc\'c6\'cb\'e3\'d7\'d6\'b7\'fb\'b4\'ae\'b3\'a4\'b6\'c8\'b9\'a6\'c4\'dc\
	bzero		\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa>\'d7\'d6\'b7\'fb\'b4\'ae\'c7\'e5\'bf\'d5\'b9\'a6\'c4\'dc\
	atoi			\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa>\'d7\'d6\'b7\'fb\'b4\'ae\'d7\'aa\'d5\'fb\'d0\'cd\'b9\'a6\'c4\'dc\
	strcat		\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa>\'d7\'d6\'b7\'fb\'b4\'ae\'c1\'ac\'bd\'d3\'b9\'a6\'c4\'dc\
	strcpy		\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa>\'d7\'d6\'b7\'fb\'b4\'ae\'b8\'b4\'d6\'c6\'b9\'a6\'c4\'dc\
	strcmp		\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa>\'d7\'d6\'b7\'fb\'b4\'ae\'b1\'c8\'bd\'cf\'b9\'a6\'c4\'dc\
	strchr		\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa>\'d7\'d6\'b7\'fb\'b4\'ae\'b2\'e9\'d5\'d2\'d7\'d6\'b7\'fb\'b9\'a6\'c4\'dc\
	strstr			\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa\'a1\'aa>\'d7\'d6\'b7\'fb\'b4\'ae\'b2\'e9\'d5\'d2\'d7\'d6\'b7\'fb\'b4\'ae\'b9\'a6\'c4\'dc\
	\'d2\'bb\'b8\'f6\'ba\'af\'ca\'fd\'b6\'d4\'d3\'a6\'d2\'bb\'b8\'f6\'b9\'a6\'c4\'dc\'a3\'ac\'ba\'af\'ca\'fd\'ca\'b5\'bc\'ca\'be\'cd\'ca\'c7\'b6\'d4\'b9\'a6\'c4\'dc\'b4\'fa\'c2\'eb\'b5\'c4\'b7\'e2\'d7\'b0\'a3\'ac\'ba\'af\'ca\'fd\'c3\'fb\'ca\'b5\'bc\'ca	\'be\'cd\'ca\'c7\'b9\'a6\'c4\'dc\'c3\'fb
\f0 \
\
\cf2 2:
\f1 \'ba\'af\'ca\'fd\'b5\'c4\'b7\'e2\'d7\'b0\
	\'cb\'bc\'bf\'bc\'a3\'ba\'b6\'d410\'b8\'f6\'ca\'fd\'ba\'cd100\'b8\'f6\'ca\'fd\'bd\'f8\'d0\'d0\'c5\'c5\'d0\'f2\
\'b6\'d410\'b8\'f6\'ca\'fd\'c5\'c5\'d0\'f2\'a3\'ba\
void maopao(int arr[], int n)\
\{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2 \cf3 \cb0 \CocoaLigature0 for (j=0; j<10; j++)\{//
\f1 \'c3\'b0\'c5\'dd\'d6\'b4\'d0\'d0\'b5\'c4\'b4\'ce\'ca\'fd
\f2 \
		for (i=0; i<10-1; i++)\{//
\f1 \'c3\'b0\'c5\'dd
\f2 \
			if (arr[i] > arr[i+1])\{//
\f1 \'b1\'c8\'bd\'cf
\f2 \
				tmp = arr[i];//
\f1 \'bd\'bb\'bb\'bb
\f2 \
				arr[i] = arr[i+1];\
				arr[i+1] = tmp;\
			\}\
		\}\
	\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f1 \cf2 \cb1 \CocoaLigature1 \}\
\'b6\'d4100\'b8\'f6\'ca\'fd\'c5\'c5\'d0\'f2\'a3\'ba\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2 \cf3 \cb0 \CocoaLigature0 for (j=0; j<100; j++)\{//
\f1 \'c3\'b0\'c5\'dd\'d6\'b4\'d0\'d0\'b5\'c4\'b4\'ce\'ca\'fd
\f2 \
		for (i=0; i<100-1; i++)\{//
\f1 \'c3\'b0\'c5\'dd
\f2 \
			if (brr[i] > brr[i+1])\{//
\f1 \'b1\'c8\'bd\'cf
\f2 \
				tmp = brr[i];//
\f1 \'bd\'bb\'bb\'bb
\f2 \
				brr[i] = brr[i+1];\
				brr[i+1] = tmp;\
			\}\
		\}\
	\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f1 \cf2 \cb1 \CocoaLigature1 	\cf0 \'d7\'dc\'bd\'e1\'a3\'ba\cf2 \
\cf0 	\'cf\'e0\'cd\'ac\'b5\'e3\'a3\'ba\'c1\'bd\'b6\'ce\'b4\'fa\'c2\'eb\'ca\'b5\'cf\'d6\'b5\'c4\'b9\'a6\'c4\'dc\'cf\'e0\'cd\'ac(\'b6\'bc\'ca\'c7\'ca\'b5\'cf\'d6\'c5\'c5\'d0\'f2\'b9\'a6\'c4\'dc)\'a3\'ac\'b2\'a2\'c7\'d2\'b2\'d9\'d7\'f7\'b5\'c4\'ca\'fd	\'be\'dd\'b5\'c4\'ca\'fd\'be\'dd\'c0\'e0\'d0\'cd\'ca\'c7\'cf\'e0\'cd\'ac\'a3\'a8\'b6\'bc\'ca\'c7\'ca\'fd\'d7\'e9\'a3\'a9	\'b2\'bb\'cd\'ac\'b5\'e3\'a3\'ba\'b2\'d9\'d7\'f7\'b5\'c4\'ca\'fd\'be\'dd\'b5\'c4\'b8\'f6\'ca\'fd\'b2\'bb\'cd\'ac\
	\'d7\'dc\'bd\'e1\'a3\'ba\
	\'ba\'af\'ca\'fd\'b5\'c4\'b7\'e2\'d7\'b0\'a3\'ba\'bd\'ab\'ca\'b5\'cf\'d6\'ba\'af\'ca\'fd\'b9\'a6\'c4\'dc\'b5\'c4\'b4\'fa\'c2\'eb\'d3\'c3\'d2\'bb\'b8\'f6\'b4\'f3\'c0\'a8\'ba\'c5\'c0\'ab\'c6\'f0\'c0\'b4(\'ba\'af\'ca\'fd\'cc\'e5),\'b6\'d4\'d5\'e2	\'b6\'ce\'b9\'a6\'c4\'dc\'d0\'d4\'b5\'c4\'b4\'fa\'c2\'eb\'c6\'f0\'d2\'bb\'b8\'f6\'c3\'fb\'d7\'d6(\'ba\'af\'ca\'fd\'c3\'fb),\'b0\'d1\'ba\'af\'ca\'fd\'cc\'e5\'d6\'d0\'d0\'e8\'d2\'aa\'b2\'d9\'d7\'f7\'b5\'c4\'ca\'fd\'be\'dd\'b7\'c5\'b5\'bd\'d0\'a1	\'c0\'a8\'ba\'c5\'c0\'ef(\'ba\'af\'ca\'fd\'b5\'c4\'d0\'ce\'b2\'ce)\'a3\'ac\'d4\'da\'ba\'af\'ca\'fd\'c3\'fb\'b5\'c4\'c7\'b0\'c3\'e6\'bc\'d3\'c9\'cf\'d2\'bb\'b8\'f6\'ca\'fd\'be\'dd\'c0\'e0\'d0\'cd(\'ba\'af\'ca\'fd\'c0\'e0\'d0\'cd\'bb\'f2	\'ba\'af\'ca\'fd\'b7\'b5\'bb\'d8\'d6\'b5\'b5\'c4\'c0\'e0\'d0\'cd)\
\
3:\'ba\'af\'ca\'fd\'b5\'c4\'d3\'c5\'b5\'e3\
	1:\'d4\'da\'d2\'bb\'b8\'f6\'b3\'cc\'d0\'f2\'d6\'d0\'ce\'d2\'c3\'c7\'d6\'bb\'d0\'e8\'d2\'aa\'ca\'b5\'cf\'d6\'d2\'bb\'b4\'ce\'ba\'af\'ca\'fd\'b5\'c4\'b9\'a6\'c4\'dc\'b4\'fa\'c2\'eb\'bc\'b4\'bf\'c9\'a3\'ac\'d4\'da\'b3\'cc\'d0\'f2\'b5\'c4\'c8\'ce	\'ba\'ce	\'d6\'bb\'d2\'aa\'ca\'b9\'d3\'c3\'b8\'c3\'b9\'a6\'c4\'dc\'ca\'b1\'a3\'ac\'d6\'bb\'d0\'e8\'d2\'aa\'d2\'bb\'cc\'f5\'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3\'d3\'ef\'be\'e4\'bc\'b4\'bf\'c9\'a3\'ac\'ce\'de\'d0\'e8\'d4\'d9\'b4\'ce\'ca\'b5\'cf\'d6\'b8\'c3	\'ba\'af	\'ca\'fd\'b5\'c4\'b9\'a6\'c4\'dc\
	2:\'ce\'d2\'c3\'c7\'b3\'cc\'d0\'f2\'d6\'d0\'b1\'e0\'d0\'b4\'b5\'c4\'ba\'af\'ca\'fd\'a3\'ac\'bf\'c9\'d2\'d4\'b6\'d4\'cd\'e2\'cc\'e1\'b9\'a9\'bd\'d3\'bf\'da\'a3\'ac\'b8\'f8\'b1\'f0\'b5\'c4\'b3\'cc\'d0\'f2\'d4\'b1\'ca\'b9\'d3\'c3\
	\'ba\'af\'ca\'fd\'b5\'c4\'d3\'c5\'b5\'e3\'a3\'ba\'b4\'fa\'c2\'eb\'b8\'b4\'d3\'c3\
	\
	\'ba\'af\'ca\'fd\'b5\'c4\'ca\'b5\'cf\'d6\'d5\'df\'a3\'ba\'b6\'d4\'cd\'e2\'d6\'bb\'cc\'e1\'b9\'a9\'ba\'af\'ca\'fd\'b5\'c4\'bd\'d3\'bf\'da\'d0\'c5\'cf\'a2\'a3\'ac\'ce\'de\'d0\'e8\'cc\'e1\'b9\'a9\'ba\'af\'ca\'fd\'b5\'c4\'ca\'b5\'cf\'d6\'cf\'b8	\'bd\'da\'a3\'ac\'ca\'b5\'cf\'d6\'ba\'af\'ca\'fd\'cf\'b8\'bd\'da\'b1\'a3\'c3\'dc\
	\'ba\'af\'ca\'fd\'b5\'c4\'ca\'b9\'d3\'c3\'d5\'df\'a3\'ba\'ce\'de\'d0\'e8\'b9\'d8\'d0\'c4\'ba\'af\'ca\'fd\'b5\'c4\'ca\'b5\'cf\'d6\'a3\'ac\'d6\'bb\'d0\'e8\'d2\'aa\'ca\'b9\'d3\'c3\'bc\'b4\'bf\'c9\'a3\'ac\'ce\'de\'d0\'e8\'d4\'d9\'b4\'ce\'ca\'b5\'cf\'d6	\'ba\'af\'ca\'fd\'b5\'c4\'b9\'a6\'c4\'dc\
\
4:\'b3\'a3\'bc\'fb\'ba\'af\'ca\'fd\'b5\'c4\'d6\'d6\'c0\'e0\
	\'bf\'e2\'ba\'af\'ca\'fd\'a3\'ba\'cf\'b5\'cd\'b3\'b1\'ea\'d7\'bc\'bf\'e2\'d6\'d0\'cc\'e1\'b9\'a9\'b5\'c4\'ba\'af\'ca\'fd\
	\'d7\'d4\'b6\'a8\'d2\'e5\'ba\'af\'ca\'fd\'a3\'ba\'b3\'cc\'d0\'f2\'d4\'b1\'b8\'f9\'be\'dd\'b3\'cc\'d0\'f2\'b5\'c4\'d0\'e8\'d2\'aa\'d7\'d4\'bc\'ba\'b1\'e0\'d0\'b4\'b5\'c4\'ba\'af\'ca\'fd\
\
5:\'ca\'b9\'d3\'c3\'ba\'af\'ca\'fd\'ca\'b1\'d0\'e8\'d2\'aa\'be\'df\'b1\'b8\'b5\'c4\'cc\'f5\'bc\'fe\
	\'bf\'e2\'ba\'af\'ca\'fd\'a3\'ba\'bc\'d3\'d4\'d8\'ba\'af\'ca\'fd\'c9\'f9\'c3\'f7\'b5\'c4\'cf\'e0\'b9\'d8\'d0\'c5\'cf\'a2\'b5\'c4\'cd\'b7\'ce\'c4\'bc\'fe\'a3\'ac\'b1\'e0\'d2\'eb\'b5\'c4\'ca\'b1\'ba\'f2\'c1\'ac\'bd\'d3\'ba\'af\'ca\'fd\'ca\'b5\'cf\'d6	\'b5\'c4\'bf\'e2\'a3\'a8\'bf\'e2\'c0\'ef\'d3\'d0\'ba\'af\'ca\'fd\'b5\'c4\'ca\'b5\'cf\'d6\'a3\'a9\
	\'d7\'d4\'b6\'a8\'d2\'e5\'ba\'af\'ca\'fd\'a3\'ba\'ba\'af\'ca\'fd\'b6\'a8\'d2\'e5\'a3\'ac\'ba\'af\'ca\'fd\'c9\'f9\'c3\'f7\'a3\'ac\'ba\'af\'ca\'fd\'b5\'c4\'b5\'f7\'d3\'c3\
\
6:\'d2\'bb\'b8\'f6\'cd\'ea\'d5\'fb\'b5\'c4\'d7\'d4\'b6\'a8\'d2\'e5\'ba\'af\'ca\'fd\'d0\'e8\'d2\'aa\'b0\'fc\'ba\'ac\'b5\'c4\'c4\'da\'c8\'dd\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f2 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf3 \
int add(int a, int b);//
\f1 \'ba\'af\'ca\'fd\'b5\'c4\'c9\'f9\'c3\'f7
\f2 \
int main(int argc, const char *argv[])\
\{\
	int a = 3;\
	int b = 5;\
	int c = add(a, b);//
\f1 \'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3
\f2 \
	printf("c = %d\\n", c);\
	return 0;\
\} \
int add(int a, int b)//
\f1 \'ba\'af\'ca\'fd\'b5\'c4\'b6\'a8\'d2\'e5
\f2 \
\{\
	int c = a + b;\
	return c;\
\}
\f1 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
	\'d7\'dc\'bd\'e1\'a3\'ba\'d2\'bb\'b8\'f6\'cd\'ea\'d5\'fb\'b5\'c4\'d7\'d4\'b6\'a8\'d2\'e5\'ba\'af\'ca\'fd\'d0\'e8\'d2\'aa\'b0\'fc\'ba\'ac\'ba\'af\'ca\'fd\'b5\'c4\'c9\'f9\'c3\'f7/\'b5\'f7\'d3\'c3/\'b6\'a8\'d2\'e5\
7:\'ba\'af\'ca\'fd\'b5\'c4\'b6\'a8\'d2\'e5\
	\'ba\'af\'ca\'fd\'b5\'c4\'b6\'a8\'d2\'e5\'a3\'ba\'ca\'b5\'cf\'d6\'ba\'af\'ca\'fd\'b5\'c4\'b9\'a6\'c4\'dc\
	\'b8\'f1\'ca\'bd\'a3\'ba\
	\'ca\'fd\'be\'dd\'c0\'e0\'d0\'cd \'ba\'af\'ca\'fd\'c3\'fb(\'d0\'ce\'b2\'ce\'c1\'d0\'b1\'ed)\
	\{\
		\'ba\'af\'ca\'fd\'cc\'e5;\
	\}\
	\'ba\'af\'ca\'fd\'c3\'fb\'a3\'ba\'ca\'b5\'bc\'ca\'be\'cd\'ca\'c7\'b9\'a6\'c4\'dc\'c3\'fb\'a3\'ac\'ba\'af\'ca\'fd\'c3\'fb\'ca\'c7\'d2\'bb\'b8\'f6\'b5\'d8\'d6\'b7\'b3\'a3\'c1\'bf\'a3\'ac\'ca\'c7\'b8\'c3\'ba\'af\'ca\'fd\'b5\'c4\'c8\'eb\'bf\'da\'b5\'d8	\'d6\'b7\
	\'d0\'ce\'b2\'ce\'c1\'d0\'b1\'ed\'a3\'ba\'b6\'e0\'b8\'f6\'ca\'fd\'be\'dd\'c0\'e0\'d0\'cd \'b1\'e4\'c1\'bf\'c3\'fb\'b9\'b9\'b3\'c9\'a3\'ac\'d6\'d0\'bc\'e4\'d3\'c3\'b6\'ba\'ba\'c5\'b8\'f4\'bf\'aa\'a3\'ac\'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3\'bf\'aa\'ca\'bc	\'c7\'b0\'a3\'ac\'d0\'ce\'b2\'ce\'d4\'da\'c4\'da\'b4\'e6\'d6\'d0\'b2\'bb\'d5\'bc\'d3\'c3\'c8\'ce\'ba\'ce\'b4\'e6\'b4\'a2\'b5\'a5\'d4\'aa\'a3\'ac\'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3\'ca\'b1\'bb\'e1\'bd\'ab\'ca\'b5\'b2\'ce\'b5\'c4\'d6\'b5\'b4\'ab\'b5\'dd	\'b8\'f8\'d0\'ce\'b2\'ce\'a3\'ac\'d4\'da\'ba\'af\'ca\'fd\'cc\'e5\'be\'cd\'bf\'c9\'d2\'d4\'c8\'a5\'b2\'d9\'d7\'f7\'d0\'ce\'b2\'ce\'b5\'c4\'d6\'b5\'a3\'ac\'d7\'ee\'d6\'d0\'b5\'c3\'b5\'bd\'cf\'eb\'d2\'aa\'b5\'c4\'bd\'e1\'b9\'fb(\'c8\'e7\'b9\'fb\'ba\'af	\'ca\'fd\'c3\'bb\'d3\'d0\'d0\'ce\'b2\'cevoid)\
	\'ca\'fd\'be\'dd\'c0\'e0\'d0\'cd\'a3\'ba\'ba\'af\'ca\'fd\'c0\'e0\'d0\'cd\'bb\'f2\'ba\'af\'ca\'fd\'b7\'b5\'bb\'d8\'d6\'b5\'c0\'e0\'d0\'cd\'a3\'ac\'ba\'cdreturn\'b7\'b5\'bb\'d8\'b5\'c4\'ca\'fd\'be\'dd\'b5\'c4\'ca\'fd\'be\'dd\'c0\'e0	\'d0\'cd\'b6\'d4\'d3\'a6(\'c8\'e7\'b9\'fb\'c3\'bb\'d3\'d0\'b7\'b5\'bb\'d8\'d6\'b5void)\
	\{\}:\{\'b1\'ed\'ca\'be\'ba\'af\'ca\'fd\'b5\'c4\'bf\'aa\'ca\'bc,\}\'ba\'af\'ca\'fd\'b5\'c4\'bd\'e1\'ca\'f8,\{\}\'d6\'d0\'bc\'e4\'ca\'c7\'ba\'af\'ca\'fd\'b5\'c4\'ca\'b5\'cf\'d6\
	\
	\'c1\'b7\'cf\'b0\'a3\'ba\'ca\'b5\'cf\'d6max\'ba\'af\'ca\'fd\'b5\'c4\'b6\'a8\'d2\'e5\
\
8:\'ba\'af\'ca\'fd\'b5\'c4\'b5\'f7\'d3\'c3\
	\'ba\'af\'ca\'fd\'b5\'c4\'b5\'f7\'d3\'c3\'a3\'ba\'ca\'b9\'d3\'c3\'ba\'af\'ca\'fd\'b9\'a6\'c4\'dc\
	\'b8\'f1\'ca\'bd\'a3\'ba\'ba\'af\'ca\'fd\'c3\'fb(\'ca\'b5\'b2\'ce\'c1\'d0\'b1\'ed);\
	\'ba\'af\'ca\'fd\'c3\'fb\'a3\'ba\'ba\'cd\'ba\'af\'ca\'fd\'b6\'a8\'d2\'e5\'ca\'b1\'b5\'c4\'ba\'af\'ca\'fd\'c3\'fb\
	\'ca\'b5\'b2\'ce\'c1\'d0\'b1\'ed\'a3\'ba\'ca\'b5\'b2\'ce\'bf\'c9\'d2\'d4\'ca\'c7\'b3\'a3\'c1\'bf\'a3\'ac\'b1\'e4\'c1\'bf\'a3\'ac\'b1\'ed\'b4\'ef\'ca\'bd\'a3\'ac\'b5\'ab\'ca\'c7\'d2\'aa\'d3\'d0\'be\'df\'cc\'e5\'b5\'c4\'d6\'b5\'a3\'ac\'b5\'b1\'b7\'a2	\'c9\'fa\'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3\'a3\'ac\'ca\'d7\'cf\'c8\'bc\'c6\'cb\'e3\'ca\'b5\'b2\'ce\'b1\'ed\'b4\'ef\'ca\'bd\'b5\'c4\'d6\'b5\'a3\'ac\'bd\'ab\'bc\'c6\'cb\'e3\'b5\'c4\'bd\'e1\'b9\'fb\'b4\'ab\'b5\'dd\'b8\'f8\'d0\'ce\'b2\'ce\'a3\'ac\'d0\'ce	\'b2\'ce\'d4\'da\'bd\'d3\'ca\'dc\'b5\'bd\'ca\'b5\'b2\'ce\'b5\'c4\'d6\'b5\'d6\'ae\'ba\'f3\'a3\'ac\'be\'cd\'bf\'c9\'d2\'d4\'d4\'da\'ba\'af\'ca\'fd\'cc\'e5\'d6\'d0\'b2\'d9\'d7\'f7\'d0\'ce\'b2\'ce\
	\'b3\'a3\'bc\'fb\'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3\'b5\'c4\'d0\'ce\'ca\'bd\'a3\'ba\
	1:\'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3\'d3\'ef\'be\'e4\'a3\'ba\'b5\'b1\'ba\'af\'ca\'fd\'c3\'bb\'d3\'d0\'b7\'b5\'bb\'d8\'d6\'b5\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac\'bf\'c9\'d2\'d4\'d6\'b1\'bd\'d3\'b5\'f7\'d3\'c3\'b8\'c3\'ba\'af\'ca\'fd\
	maopao(arr, 10);\
	2:\'ba\'af\'ca\'fd\'b1\'ed\'b4\'ef\'ca\'bd\'a3\'ba\'b5\'b1\'ba\'af\'ca\'fd\'d3\'d0\'b7\'b5\'bb\'d8\'d6\'b5\'ca\'b1\'a3\'ac\'bf\'c9\'d2\'d4\'bd\'ab\'ba\'af\'ca\'fd\'b5\'c4\'b7\'b5\'bb\'d8\'d6\'b5\'b2\'ce\'d3\'eb\'b1\'ed\'b4\'ef\'ca\'bd\'b5\'c4	\'bc\'c6\'cb\'e3\
	int c = add(3, 5)+d;\
	3:\'ba\'af\'ca\'fd\'b5\'c4\'b2\'ce\'ca\'fd\'a3\'ba\'b5\'b1\'ba\'af\'ca\'fd\'d3\'d0\'b7\'b5\'bb\'d8\'d6\'b5\'ca\'b1\'a3\'ac\'bf\'c9\'d2\'d4\'bd\'ab\'ba\'af\'ca\'fd\'b5\'c4\'b7\'b5\'bb\'d8\'d6\'b5\'d7\'f7\'ce\'aa\'c1\'ed\'d2\'bb\'b8\'f6\'ba\'af	\'ca\'fd\'b5\'c4\'ca\'b5\'b2\'ce\
	printf(\'a1\'b0add(3, 5)= %d\\n\'a1\'b1, add(3, 5));\
	int d = max(c, max(a, b));//\'ba\'af\'ca\'fd\'b5\'c4\'c7\'b6\'cc\'d7\
	\'c1\'b7\'cf\'b0\'a3\'ba\'ca\'b5\'cf\'d6max\'ba\'af\'ca\'fd\'b5\'c4mian\'ba\'af\'ca\'fd\'b2\'bf\'b7\'d6\
\
9:\'ba\'af\'ca\'fd\'b5\'c4\'c9\'f9\'c3\'f7\
	\'ba\'af\'ca\'fd\'c9\'f9\'c3\'f7\'a3\'ba\'ba\'af\'ca\'fd\'c9\'f9\'c3\'f7\'ca\'b5\'bc\'ca\'ca\'c7\'b0\'d1\'ba\'af\'ca\'fd\'b5\'c4\'cf\'e0\'b9\'d8\'d0\'c5\'cf\'a2(\'ba\'af\'ca\'fd\'c3\'fb\'a3\'ac\'ba\'af\'ca\'fd\'d0\'ce\'b2\'ce\'b5\'c4\'c0\'e0	\'d0\'cd\'a3\'ac\'d0\'ce\'b2\'ce\'b5\'c4\'b8\'f6\'ca\'fd\'a3\'ac\'d0\'ce\'b2\'ce\'b5\'c4\'cb\'b3\'d0\'f2)\'b8\'e6\'cb\'df\'b8\'f8\'b1\'e0\'d2\'eb\'c6\'f7\'a3\'ac\'b5\'b1\'b7\'a2\'c9\'fa\'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3\'ca\'b1\'a3\'ac\'bb\'e1\'b6\'d4	\'ba\'af\'ca\'fd\'b5\'c4\'cf\'e0\'b9\'d8\'d0\'c5\'cf\'a2\'bd\'f8\'d0\'d0\'bc\'ec\'b2\'e9\
	\'b8\'f1\'ca\'bd\'a3\'ba\'ca\'fd\'be\'dd\'c0\'e0\'d0\'cd \'ba\'af\'ca\'fd\'c3\'fb(\'d0\'ce\'b2\'ce\'c1\'d0\'b1\'ed)\'a3\'bb\
	\'ba\'af\'ca\'fd\'c9\'f9\'c3\'f7\'ba\'cd\'ba\'af\'ca\'fd\'b6\'a8\'d2\'e5\'b5\'c4\'b5\'da\'d2\'bb\'be\'e4\'cf\'e0\'b9\'d8\'a3\'ac\'c4\'a9\'ce\'b2\'bc\'d3\'c9\'cf\'b7\'d6\'ba\'c5\
	\
	\'ba\'af\'ca\'fd\'c9\'f9\'c3\'f7\'b5\'c4\'ce\'bb\'d6\'c3\'a3\'ba\
	1:\'ce\'c4\'bc\'fe\'bf\'aa\'ca\'bc\'b4\'a6\'a3\'ac\'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3\'c7\'b0\
	2:main\'ba\'af\'ca\'fd\'d6\'d0\'a3\'ac\'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3\'c7\'b0\
	3:\'b5\'b1\'ba\'af\'ca\'fd\'b5\'c4\'b6\'a8\'d2\'e5\'d4\'da\'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3\'c7\'b0\'a3\'ac\'ba\'af\'ca\'fd\'b5\'c4\'c9\'f9\'c3\'f7\'bf\'c9\'d2\'d4\'ca\'a1\'c2\'d4\
	\'c1\'b7\'cf\'b0\'a3\'ba\'ca\'b5\'cf\'d6max\'ba\'af\'ca\'fd\'b5\'c4\'c9\'f9\'c3\'f7\'b2\'bf\'b7\'d6\
	\
\cf2 10:\'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3\'b5\'c4\'d5\'fb\'b8\'f6\'b9\'fd\'b3\'cc\
	\cf0 1:\'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3\'bf\'aa\'ca\'bc\'c7\'b0\'a3\'ac\'d0\'ce\'b2\'ce\'d4\'da\'c4\'da\'b4\'e6\'d6\'d0\'b2\'bb\'d5\'bc\'d3\'c3\'c8\'ce\'ba\'ce\'b5\'c4\'b4\'e6\'b4\'a2\'bf\'d5\'bc\'e4\'a3\'ac\'b5\'b1\'b7\'a2\'c9\'fa\'ba\'af\'ca\'fd	\'b5\'f7\'d3\'c3\'ca\'b1\'b2\'c5\'bb\'e1\'ce\'aa\'d0\'ce\'b2\'ce\'d4\'da\'d5\'bb\'c9\'cf\'bf\'aa\'b1\'d9\'cf\'e0\'d3\'a6\'b5\'c4\'b4\'e6\'b4\'a2\'bf\'d5\'bc\'e4\
	2:\'b7\'a2\'c9\'fa\'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3\'ca\'b1\'a3\'ac\'ca\'d7\'cf\'c8\'bc\'c6\'cb\'e3\'ca\'b5\'b2\'ce\'b1\'ed\'b4\'ef\'ca\'bd\'b5\'c4\'d6\'b5\'a3\'ac\'bd\'ab\'ca\'b5\'b2\'ce\'b5\'c4\'d6\'b5\'b4\'ab\'b5\'dd\'b8\'f8\'d0\'ce	\'b2\'ce\'a3\'ac\'ca\'b5\'b2\'ce\'ba\'cd\'d0\'ce\'b2\'ce\'b5\'c4\'c3\'fb\'d7\'d6\'bf\'c9\'d2\'d4\'cf\'e0\'cd\'ac\'a3\'ac\'b5\'ab\'ca\'c7\'d4\'da\'c4\'da\'b4\'e6\'d6\'d0\'d5\'bc\'d3\'c3\'b2\'bb\'cd\'ac\'b5\'c4\'b4\'e6\'b4\'a2\'b5\'a5\'d4\'aa\
	3:\'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3\'b9\'fd\'b3\'cc\'d6\'d0\'a3\'ac\'d0\'ce\'b2\'ce\'bd\'d3\'ca\'d5\'b5\'bd\'ca\'b5\'b2\'ce\'b5\'c4\'d6\'b5\'d6\'ae\'ba\'f3\'a3\'ac\'be\'cd\'bf\'c9\'d2\'d4\'d4\'da\'ba\'af\'ca\'fd\'cc\'e5\'d6\'d0\'b2\'d9\'d7\'f7	\'d0\'ce\'b2\'ce\'a3\'ac\'d7\'ee\'d6\'d5\'b5\'c3\'b5\'bd\'cf\'eb\'d2\'aa\'b5\'c4\'bd\'e1\'b9\'fb\
	4:\'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3\'bd\'e1\'ca\'f8\'ca\'b1\'a3\'ac\'cd\'a8\'b9\'fdreturn\'bd\'ab\'b7\'b5\'bb\'d8\'d6\'b5\'b7\'b5\'bb\'d8\'b8\'f8\'d6\'f7\'b5\'f7\'ba\'af\'ca\'fd\
	5:\'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3\'bd\'e1\'ca\'f8\'ba\'f3\'a3\'ac\'cf\'b5\'cd\'b3\'ce\'aa\'d0\'ce\'b2\'ce\'d4\'da\'d5\'bb\'c9\'cf\'bf\'aa\'b1\'d9\'b5\'c4\'b4\'e6\'b4\'a2\'bf\'d5\'bc\'e4\'bd\'ab\'bb\'e1\'b1\'bb\'ca\'cd\'b7\'c5\
	\
	\'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3\'a3\'ba\'d1\'b9\'d5\'bb\
	\'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3\'bd\'e1\'ca\'f8\'a3\'ba\'b3\'f6\'d5\'bb\cf2 \
	\
\cf0 11:\'ba\'af\'ca\'fd\'ba\'cd\'c6\'e4\'cb\'fb\'ca\'fd\'be\'dd\'c0\'e0\'d0\'cd\'b5\'c4\'bd\'e1\'ba\'cf\
	1:\'ba\'af\'ca\'fd\'d0\'cd\'b2\'ce\'ca\'c7\'bb\'f9\'b1\'be\'ca\'fd\'be\'dd\'c0\'e0\'d0\'cd\'b5\'c4\'b1\'e4\'c1\'bf(int, char, float,double)\
	
\f3 \uc0\u32451 \u20064 \u65306 \
		1\uc0\u65306 \u21028 \u26029 \u19968 \u20010 \u25968 n\u33021 \u21542 \u21516 \u26102 \u34987 3\u21644 5\u25972 \u38500 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
\
void judge(int n);//
\f1 \'ba\'af\'ca\'fd\'b5\'c4\'c9\'f9\'c3\'f7
\f2 \
int main(int argc, const char *argv[])\
\{\
	int n = 0;\
	scanf("%d", &n);\
	judge(n);//
\f1 \'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3
\f2 \
	return 0;\
\} \
void judge(int n)//
\f1 \'ba\'af\'ca\'fd\'b5\'c4\'b6\'a8\'d2\'e5
\f2 \
\{\
	if ((n%3==0) && (n%5==0))\{\
		printf("Yes\\n");\
	\}\
	else \{\
		printf("No\\n");\
	\}\
\}
\f3 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 		void judge(int n);\
		2\uc0\u65306 \u20889 \u20004 \u20010 \u20989 \u25968 \u65292 \u20998 \u21035 \u27714 \u20004 \u20010 \u25972 \u25968 \u30340 \u26368 \u22823 \u20844 \u32422 \u25968 \u21644 \u26368 \u23567 \u20844 \u20493 		\u25968 \u65292 \u29992 \u20027 \u20989 \u25968 \u35843 \u29992 \u32773 \u20004 \u20010 \u20989 \u25968 \u65292 \u24182 \u36755 \u20986 \u32467 \u26524 \u12290 \u20004 \u20010 \u25972 \u25968 \u30001 \u38190 		\u30424 \u36755 \u20837 \u12290 \
		int function(int n1, int n2);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
\
int common_divisor(int n1, int n2);//
\f1 \'ba\'af\'ca\'fd\'c9\'f9\'c3\'f7
\f2 \
int common_multiple(int n1, int n2);//
\f1 \'ba\'af\'ca\'fd\'c9\'f9\'c3\'f7
\f2 \
int main(int argc, const char *argv[])\
\{\
	int n1 = 0;\
	int n2 = 0;\
	scanf("%d", &n1);\
	scanf("%d", &n2);\
	printf("common_divisor(n1,n2) = %d\\n", common_divisor(n1,n2));//
\f1 \'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3
\f2 \
	printf("common_multiple(n1, n2) = %d\\n", common_multiple(n1, n2));//
\f1 \'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3
\f2 \
\
	return 0;\
\} \
int common_divisor(int n1, int n2)//
\f1 \'ba\'af\'ca\'fd\'b6\'a8\'d2\'e5
\f2 \
\{\
	int i = 0;\
	for (i=((n1<n2)?n1:n2); i>0; i--)\{//
\f1 \'d1\'ad\'bb\'b7\'b4\'d3\'c1\'bd\'b8\'f6\'ca\'fd\'d6\'d0\'bd\'cf\'d0\'a1\'ca\'fd\'bf\'aa\'ca\'bc\'a3\'ac\'b5\'bd
\f2 1
\f1 \'bd\'e1\'ca\'f8
\f2 \
		if ((n1%i==0) && (n2%i==0))\{//
\f1 \'c4\'dc\'b9\'bb\'b1\'bb\'c1\'bd\'b8\'f6\'ca\'fd\'cd\'ac\'ca\'b1\'d5\'fb\'b3\'fd
\f2 \
			break;\
		\}\
	\}\
	return i;\
\}\
\
\
int common_multiple(int n1, int n2)//
\f1 \'ba\'af\'ca\'fd\'b6\'a8\'d2\'e5
\f2 \
\{\
	int i = 0;\
	for (i=((n1>n2)?n1:n2); i<=(n1*n2); i++)\{//
\f1 \'d1\'ad\'bb\'b7\'b4\'d3\'c1\'bd\'b8\'f6\'ca\'fd\'d6\'d0\'bd\'cf\'b4\'f3\'b5\'c4\'ca\'fd\'bf\'aa\'ca\'bc
\f2 \
		if ((i%n1==0) && (i%n2==0))\{//
\f1 \'c4\'dc\'b9\'bb\'b1\'bb\'b0\'d1\'d5\'e2\'c1\'bd\'b8\'f6\'ca\'fd\'cd\'ac\'ca\'b1\'d5\'fb\'b3\'fd
\f2 \
			break;\
		\}\
	\}\
	return i;\
\}
\f1 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 	int arr[10];\
	2:\'ba\'af\'ca\'fd\'d0\'cd\'b2\'ce\'ca\'c7\'ca\'fd\'d6\'b5\'d0\'cd\'ca\'fd\'d7\'e9\'c3\'fb//\'ca\'b5\'b2\'ce:\'ca\'fd\'d7\'e9\'c3\'fb(arr)//\'d0\'ce\'b2\'ce:\'ca\'fd\'d7\'e9\'c3\'fb(arr[])\
	
\f3\fs36 \uc0\u32451 \u20064 \u65306 \
		1\uc0\u65306 \u26377 \u19968 \u20010 \u19968 \u32500 \u25968 \u32452 age\u65292 \u20445 \u23384 10\u20010 \u23398 \u29983 \u30340 \u24180 \u40836 \u65292 \u27714 \u24179 \u22343 \u24180 \u40836 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
#include <time.h>\
#include <stdlib.h>\
\
#define NUM		10\
void input(int arr[], int n);//
\f1 \'ba\'af\'ca\'fd\'c9\'f9\'c3\'f7
\f2 \
void output(int arr[], int n);\
int average(int arr[], int n);\
int main(int argc, const char *argv[])\
\{\
	int arr[NUM] = \{\};\
	input(arr, NUM);//
\f1 \'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3
\f2 \
	output(arr, NUM);\
	printf("average = %d\\n", average(arr, NUM));\
	return 0;\
\} \
void input(int arr[], int n)//
\f1 \'ba\'af\'ca\'fd\'b6\'a8\'d2\'e5
\f2 \
\{\
	int i = 0;\
	srand(time(NULL));\
	for (i=0; i<n; i++)\{//
\f1 \'ca\'e4\'c8\'eb
\f2 \
		arr[i] = rand()%100;\
	\}\
\}\
\
void output(int arr[], int n)\
\{\
	int i = 0;\
	for (i=0; i<n; i++)\{//
\f1 \'ca\'e4\'b3\'f6
\f2 \
		printf("%d ", arr[i]);\
	\}\
	printf("\\n");\
\}\
\
int average(int arr[], int n)\
\{\
	int i = 0;\
	int sum = 0;\
	for (i=0; i<n; i++)\{//
\f1 \'d7\'dc\'c4\'ea\'c1\'e4
\f2 \
		sum = sum + arr[i];\
	\}\
	return (sum/n);\
\}
\f3\fs36 \cf0 \cb1 \CocoaLigature1 		\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 		2\uc0\u65306 \u29992 \u20882 \u27873 \u27861 \u23545 \u25968 \u32452 \u36827 \u34892 \u25490 \u24207 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
#include <time.h>\
#include <stdlib.h>\
\
#define NUM		10\
void input(int arr[], int n);//
\f1 \'ba\'af\'ca\'fd\'c9\'f9\'c3\'f7
\f2 \
void output(int arr[], int n);\
void sort(int arr[], int n);\
int main(int argc, const char *argv[])\
\{\
	int arr[NUM] = \{\};\
	input(arr, NUM);//
\f1 \'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3
\f2 \
	output(arr, NUM);\
	sort(arr, NUM);\
	output(arr, NUM);\
	return 0;\
\} \
void input(int arr[], int n)//
\f1 \'ba\'af\'ca\'fd\'b6\'a8\'d2\'e5
\f2 \
\{\
	int i = 0;\
	srand(time(NULL));\
	for (i=0; i<n; i++)\{//
\f1 \'ca\'e4\'c8\'eb
\f2 \
		arr[i] = rand()%100;\
	\}\
\}\
void output(int arr[], int n)\
\{\
	int i = 0;\
	for (i=0; i<n; i++)\{//
\f1 \'ca\'e4\'b3\'f6
\f2 \
		printf("%d ", arr[i]);\
	\}\
	printf("\\n");\
\}\
\
void sort(int arr[], int n)\
\{\
	int i = 0;\
	int j = 0;\
	int tmp = 0;\
	for (j=0; j<n; j++)\{\
		for (i=0; i<n-1; i++)\{\
			if (arr[i] > arr[i+1])\{\
				tmp = arr[i];\
				arr[i] = arr[i+1];\
				arr[i+1] = tmp;\
			\}\
		\}\
	\}\
\}
\f3\fs36 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 		3\uc0\u65306 \u23558 \u25968 \u32452 a\u20013 \u30340 \u25104 \u21592 \u25353 \u30456 \u21453 \u39034 \u24207 \u23384 \u25918 \u65288 \u36870 \u24207 \u65289 \
	
\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf3 #include <time.h>\
#include <stdlib.h>\
\
#define NUM		10\
void input(int arr[], int n);//
\f1 \'ba\'af\'ca\'fd\'c9\'f9\'c3\'f7
\f2 \
void output(int arr[], int n);\
void turn(int arr[], int n);\
int main(int argc, const char *argv[])\
\{\
	int arr[10] = \{\};\
	input(arr, NUM);//
\f1 \'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3
\f2 \
	output(arr, NUM);\
	turn(arr, NUM);\
	output(arr, NUM);\
	return 0;\
\} \
void input(int arr[], int n)//
\f1 \'ba\'af\'ca\'fd\'b6\'a8\'d2\'e5
\f2 \
\{\
	int i = 0;\
	srand(time(NULL));\
	for (i=0; i<n; i++)\{//
\f1 \'ca\'e4\'c8\'eb
\f2 \
		arr[i] = rand()%100;\
	\}\
\}\
void output(int arr[], int n)\
\{\
	int i = 0;\
	for (i=0; i<n; i++)\{//
\f1 \'ca\'e4\'b3\'f6
\f2 \
		printf("%d ", arr[i]);\
	\}\
	printf("\\n");\
\}\
\
void turn(int arr[], int n)\
\{\
	int i = 0;\
	int tmp = 0;\
	for (i=0; i<n/2; i++)\{\
		tmp = arr[i];\
		arr[i] = arr[n-1-i];\
		arr[n-1-i] = tmp;\
	\}\
\}
\f1 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 	3:\'ba\'af\'ca\'fd\'d0\'cd\'b2\'ce\'ca\'c7\'d7\'d6\'b7\'fb\'d0\'cd\'ca\'fd\'d7\'e9\'c3\'fb//\'ca\'b5\'b2\'ce\'a3\'ba\'ca\'fd\'d7\'e9\'c3\'fbbuf //\'d0\'ce\'b2\'ce\'a3\'ba\'ca\'fd\'d7\'e9\'c3\'fbbuf[]\
	
\f3\fs36 	\uc0\u32451 \u20064 \u65306 \
		1:	\uc0\u36755 \u20837 \u19968 \u20010 \u23383 \u31526 \u20018 \u65292 \u32479 \u35745 \u20854 \u20013 \u25968 \u23383 \u23383 \u31526 \u30340 \u20010 \u25968 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
\
#define SIZE	100\
int total(char buf[]);\
int main(int argc, const char *argv[])\
\{\
	char buf[SIZE] = "";\
	gets(buf);\
	printf("total(buf) = %d\\n", total(buf));\
	return 0;\
\} \
\
int total(char buf[])\
\{\
	int i = 0;\
	int t = 0;\
	for (i=0; buf[i]!=0; i++)\{\
		if ((buf[i]>='0')&&(buf[i]<='9'))\{\
			t++;\
		\}\
	\}\
	return t;\
\}
\f3\fs36 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 		3\uc0\u65306 \u23454 \u29616 \u23383 \u31526 \u20018 \u22788 \u29702 \u20989 \u25968 strcat\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
\
#define SIZE		100\
char *my_strcat(char buf1[], char buf2[]);//
\f1 \'ba\'af\'ca\'fd\'c9\'f9\'c3\'f7
\f2 \
int main(int argc, const char *argv[])\
\{\
	char buf1[SIZE] = "";\
	char buf2[SIZE] = "";\
	\
	gets(buf1);\
	gets(buf2);\
	printf("my_strcat(buf1, buf2) = %s\\n", my_strcat(buf1, buf2));//
\f1 \'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3
\f2 \
	return 0;\
\} \
char *my_strcat(char buf1[], char buf2[])//
\f1 \'ba\'af\'ca\'fd\'b6\'a8\'d2\'e5
\f2 (
\f1 \'d6\'b8\'d5\'eb\'ba\'af\'ca\'fd
\f2 )\
\{\
	int i = 0;\
	int j = 0;\
	for (i=0; buf1[i]!=0; i++);//
\f1 \'d5\'d2\'b5\'bd
\f2 buf1
\f1 \'c4\'a9\'ce\'b2
\f2 \
	for (j=0; buf2[j]!=0; j++)\{//
\f1 \'b1\'e9\'c0\'fa
\f2 buf2\
		buf1[i+j] = buf2[j];//
\f1 \'bd\'ab
\f2 buf2
\f1 \'b8\'b4\'d6\'c6\'b8\'f8
\f2 buf1
\f1 \'c4\'a9\'ce\'b2
\f2 \
	\}\
	buf1[i+j] = buf2[j];//
\f1 \'b8\'b4\'d6\'c6
\f2 '\\0'\
	return buf1;\
\}
\f3\fs36 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
		5\uc0\u65306 \u23454 \u29616 \u23383 \u31526 \u20018 \u22788 \u29702 \u20989 \u25968 strcmp\
		
\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf3 \
#define SIZE		100\
int my_strcmp(char buf1[], char buf2[]);//
\f1 \'ba\'af\'ca\'fd\'c9\'f9\'c3\'f7
\f2 \
int main(int argc, const char *argv[])\
\{\
	char buf1[SIZE] = "";\
	char buf2[SIZE] = "";\
	\
	gets(buf1);\
	gets(buf2);\
	printf("my_strcmp(buf1, buf2) = %d\\n", my_strcmp(buf1, buf2));\
	return 0;\
\} \
int my_strcmp(char buf1[], char buf2[])//
\f1 \'ba\'af\'ca\'fd\'b6\'a8\'d2\'e5
\f2 (
\f1 \'d6\'b8\'d5\'eb\'ba\'af\'ca\'fd
\f2 )\
\{\
	int i = 0;\
	for (i=0; buf1[i]&&buf2[i]; i++)\{\
		if (buf1[i] != buf2[i])\{\
			break;\
		\}\
	\}\
	return (buf1[i]-buf2[i]);\
\}
\f3\fs36 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 		6\uc0\u65306 \u23454 \u29616 \u23383 \u31526 \u20018 \u22788 \u29702 \u20989 \u25968 strchr\
	
\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf3 \
#define SIZE	100\
char *my_strchr(char buf[], char ch);\
int main(int argc, const char *argv[])\
\{\
	char buf[SIZE] = "";\
	char ch = 0;\
	gets(buf);\
	ch = getchar();\
	printf("my_strchr(buf, ch) = %s\\n", my_strchr(buf, ch));\
	return 0;\
\}\
\
char *my_strchr(char buf[], char ch)\
\{\
	int i = 0;\
	for (i=0; buf[i]!=0; i++)\{\
		if (buf[i] == ch)\{\
			break;\
		\}\
	\}\
	return (buf[i]?buf+i:NULL);\
\}
\f3\fs36 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f1\fs48 \cf0 	4:\'ba\'af\'ca\'fd\'b5\'c4\'b2\'ce\'ca\'fd\'ca\'c7\'d6\'b8\'d5\'eb\'b1\'e4\'c1\'bf\
		1:\'d6\'b8\'cf\'f2\'bb\'f9\'b1\'be\'ca\'fd\'be\'dd\'c0\'e0\'d0\'cd\'b5\'c4\'d6\'b8\'d5\'eb//\'ca\'b5\'b2\'ce\'a3\'ba\'b1\'e4\'c1\'bf\'b5\'c4\'b5\'d8\'d6\'b7//\'d0\'ce\'b2\'ce\'a3\'ba\'d6\'b8\'d5\'eb\'b1\'e4		\'c1\'bf//&a//int *p\
		\'c1\'b7\'cf\'b0\'a3\'ba\'bd\'bb\'bb\'bb\'c1\'bd\'b8\'f6\'b1\'e4\'c1\'bf\'b5\'c4\'d6\'b5\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f2 \cf3 \cb0 \CocoaLigature0 void swap(int *pa, int *pb)//
\f1 \'b6\'a8\'d2\'e5
\f2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf3 \{\
	int tmp = 0;\
	tmp = *pa;\
	*pa = *pb;\
	*pb = tmp;\
\}
\f1 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 		2:\'d6\'b8\'cf\'f2\'ca\'fd\'d7\'e9\'ca\'d7\'d4\'aa\'cb\'d8\'b5\'c4\'d6\'b8\'d5\'eb//\'ca\'b5\'b2\'ce\'a3\'ba\'ca\'fd\'d7\'e9\'c3\'fb//\'d0\'ce\'b2\'ce\'a3\'ba\'d6\'b8\'d5\'eb\'b1\'e4\'c1\'bf//arr,		 buf//int *pArr, char *pBuf;\
		
\f3\fs36 \cf4 2\uc0\u65306 \u26377 \u19968 \u20010 \u19968 \u32500 \u25968 \u32452 age\u65292 \u20445 \u23384 10\u20010 \u23398 \u29983 \u30340 \u24180 \u40836 \u65292 \u27714 \u24179 \u22343 \u24180 \u40836 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
#include <time.h>\
#include <stdlib.h>\
\
#define NUM		10\
int averageAge(int *pArr, int nArr);//
\f1 \'c9\'f9\'c3\'f7
\f2 \
void input(int *pArr, int nArr);\
void output(int *pArr, int nArr);\
int main(int argc, const char *argv[])\
\{\
	int age[NUM] = \{\};\
	srand(time(NULL));\
	input(age, NUM);//
\f1 \'b5\'f7\'d3\'c3
\f2 \
	output(age, NUM);\
	printf("averageAge(age, NUM) = %d\\n", averageAge(age, NUM));\
	return 0;\
\}\
\
void input(int *pArr, int nArr)//
\f1 \'b6\'a8\'d2\'e5
\f2 \
\{	\
	int i = 0;\
	for (i=0; i<nArr; i++)\{\
		*(pArr+i) = rand()%100;\
	\}\
\}\
void output(int *pArr, int nArr)\
\{	\
	int i = 0;\
	for (i=0; i<nArr; i++)\{\
		printf("%d ", *(pArr+i));\
	\}\
	printf("\\n");\
\}\
\
int averageAge(int *pArr, int nArr)\
\{\
	int i = 0;\
	int sum = 0;\
	for (i=0; i<nArr; i++)\{\
		sum = sum + *(pArr+i);//
\f1 \'c7\'f3\'d7\'dc\'ba\'cd
\f2 \
	\}\
	return (sum/nArr);//
\f1 \'c6\'bd\'be\'f9
\f2 \
\}
\f3\fs36 \cf4 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf4 		3\uc0\u65306 \u29992 \u20882 \u27873 \u27861 \u23545 \u25968 \u32452 \u36827 \u34892 \u25490 \u24207 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
#include <time.h>\
#include <stdlib.h>\
\
#define NUM		10\
void sort(int *pArr, int nArr);\
void input(int *pArr, int nArr);\
void output(int *pArr, int nArr);\
int main(int argc, const char *argv[])\
\{\
	int age[NUM] = \{\};\
	srand(time(NULL));\
	input(age, NUM);//
\f1 \'b5\'f7\'d3\'c3
\f2 \
	output(age, NUM);\
	sort(age, NUM);\
	output(age, NUM);\
	return 0;\
\}\
\
void input(int *pArr, int nArr)//
\f1 \'b6\'a8\'d2\'e5
\f2 \
\{	\
	int i = 0;\
	for (i=0; i<nArr; i++)\{\
		*(pArr+i) = rand()%100;\
	\}\
\}\
void output(int *pArr, int nArr)\
\{	\
	int i = 0;\
	for (i=0; i<nArr; i++)\{\
		printf("%d ", *(pArr+i));\
	\}\
	printf("\\n");\
\}\
\
void sort(int *pArr, int nArr)\
\{\
	int i = 0;\
	int j = 0;\
	int tmp = 0;\
	for (j=0; j<nArr; j++)\{\
	for (i=0; i<nArr-1; i++)\{\
		if (*(pArr+i) > *(pArr+i+1))\{\
			tmp = *(pArr+i);\
			*(pArr+i) = *(pArr+i+1);\
			*(pArr+i+1) = tmp;\
		\}\
	\}\
	\}\
\}
\f3\fs36 \cf4 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf4 		4\uc0\u65306 \u23558 \u25968 \u32452 a\u20013 \u30340 \u25104 \u21592 \u25353 \u30456 \u21453 \u39034 \u24207 \u23384 \u25918 \u65288 \u36870 \u24207 \u65289 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
#include <time.h>\
#include <stdlib.h>\
\
#define NUM		10\
void turn(int *pArr, int nArr);\
void input(int *pArr, int nArr);\
void output(int *pArr, int nArr);\
int main(int argc, const char *argv[])\
\{\
	int age[NUM] = \{\};\
	srand(time(NULL));\
	input(age, NUM);//
\f1 \'b5\'f7\'d3\'c3
\f2 \
	output(age, NUM);\
	turn(age, NUM);\
	output(age, NUM);\
	return 0;\
\}\
\
void input(int *pArr, int nArr)//
\f1 \'b6\'a8\'d2\'e5
\f2 \
\{	\
	int i = 0;\
	for (i=0; i<nArr; i++)\{\
		*(pArr+i) = rand()%100;\
	\}\
\}\
void output(int *pArr, int nArr)\
\{	\
	int i = 0;\
	for (i=0; i<nArr; i++)\{\
		printf("%d ", *(pArr+i));\
	\}\
	printf("\\n");\
\}\
void turn(int *pArr, int nArr)\
\{\
	int i = 0;\
	int tmp = 0;\
	for (i=0; i<nArr/2; i++)\{\
		tmp = *(pArr+i);\
		*(pArr+i) = *(pArr+nArr-i-1);\
		*(pArr+nArr-i-1) = tmp;\
	\}\
\}
\f3\fs36 \cf4 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf4 		5\uc0\u65306 \u22312 \u26377 \u24207 \u30340 \u25968 \u32452 \u20013 \u25554 \u20837 \u25972 \u25968 n\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
#include <time.h>\
#include <stdlib.h>\
\
#define NUM		10\
void insert(int *pArr, int nArr, int n);\
void sort(int *pArr, int nArr);\
void input(int *pArr, int nArr);\
void output(int *pArr, int nArr);\
int main(int argc, const char *argv[])\
\{\
	int age[NUM+1] = \{\};\
	int n = 0;\
	srand(time(NULL));\
	input(age, NUM);//
\f1 \'b5\'f7\'d3\'c3
\f2 \
	output(age, NUM);\
	sort(age, NUM);\
	output(age, NUM);\
	scanf("%d", &n);\
	insert(age, NUM, n);\
	output(age, NUM+1);\
	return 0;\
\}\
\
void input(int *pArr, int nArr)//
\f1 \'b6\'a8\'d2\'e5
\f2 \
\{	\
	int i = 0;\
	for (i=0; i<nArr; i++)\{\
		*(pArr+i) = rand()%100;\
	\}\
\}\
void output(int *pArr, int nArr)\
\{	\
	int i = 0;\
	for (i=0; i<nArr; i++)\{\
		printf("%d ", *(pArr+i));\
	\}\
	printf("\\n");\
\}\
\
void sort(int *pArr, int nArr)\
\{\
	int i = 0;\
	int j = 0;\
	int tmp = 0;\
	for (j=0; j<nArr; j++)\{\
		for (i=0; i<nArr-1; i++)\{\
			if (*(pArr+i) > *(pArr+i+1))\{\
				tmp = *(pArr+i);\
				*(pArr+i) = *(pArr+i+1);\
				*(pArr+i+1) = tmp;\
			\}\
		\}\
	\}\
\}\
\
void insert(int *pArr, int nArr, int n)\
\{\
	int i = 0;\
	int j = 0;\
	for (i=0, *(pArr+nArr)=n; i<nArr; i++)\{//
\f1 \'b1\'e9\'c0\'fa
\f2 arr\
		if (*(pArr+i) > n)\{//
\f1 \'d5\'d2\'b5\'bd
\f2 n
\f1 \'b5\'c4\'ce\'bb\'d6\'c3
\f2 \
			for (j=nArr-1; j>=i; j--)\{//
\f1 \'d1\'ad\'bb\'b7\'ba\'f3\'d2\'c6
\f2 \
				*(pArr+j+1) = *(pArr+j);\
			\}\
			*(pArr+i) = n;//
\f1 \'b2\'e5\'c8\'eb
\f2 n\
			return;\
		\}\
	\}\
\}
\f3\fs36 \cf4 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf4 		6\uc0\u65306 \u22312 \u26377 \u24207 \u30340 \u25968 \u32452 \u20013 \u21024 \u38500 \u25972 \u25968 n\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
#include <time.h>\
#include <stdlib.h>\
\
#define NUM		10\
int deleteNumber(int *pArr, int nArr, int n);\
void input(int *pArr, int nArr);\
void output(int *pArr, int nArr);\
int main(int argc, const char *argv[])\
\{\
	int age[NUM] = \{\};\
	int n = 0;\
	int t = 0;\
	srand(time(NULL));\
	input(age, NUM);//
\f1 \'b5\'f7\'d3\'c3
\f2 \
	output(age, NUM);\
	scanf("%d", &n);\
	t = deleteNumber(age, NUM, n);\
	output(age, NUM-t);\
	return 0;\
\}\
\
void input(int *pArr, int nArr)//
\f1 \'b6\'a8\'d2\'e5
\f2 \
\{	\
	int i = 0;\
	for (i=0; i<nArr; i++)\{\
		*(pArr+i) = rand()%100;\
	\}\
\}\
void output(int *pArr, int nArr)\
\{	\
	int i = 0;\
	for (i=0; i<nArr; i++)\{\
		printf("%d ", *(pArr+i));\
	\}\
	printf("\\n");\
\}\
int deleteNumber(int *pArr, int nArr, int n)\
\{\
	int i = 0;\
	int j = 0;\
	int t = 0;\
	for (i=0; i<nArr-t; i++)\{//
\f1 \'b1\'e9\'c0\'fa
\f2 arr\
		if (n == *(pArr+i))\{//
\f1 \'d5\'d2\'b5\'bd
\f2 n\
			for (j=i; j<nArr-1-t; j++)\{//
\f1 \'d1\'ad\'bb\'b7\'c7\'b0\'d2\'c6
\f2 \
				*(pArr+j) = *(pArr+j+1);\
			\}\
			t++;//
\f1 \'bc\'c6\'ca\'fd
\f2 	\
			i--;\
		\}\
	\}\
	return t;\
\}
\f3\fs36 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 		\cf5 7\uc0\u65306 \u23454 \u29616 \u23383 \u31526 \u20018 \u22788 \u29702 \u20989 \u25968 strlen\
		int my_strlen(char *pBuf);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
\
#define SIZE	100\
int my_strlen(char *pBuf);\
int main(int argc, const char *argv[])\
\{\
	char buf[SIZE] = "";\
	gets(buf);\
	printf("my_strlen(buf) = %d\\n", my_strlen(buf));\
	return 0;\
\} \
\
int my_strlen(char *pBuf)\
\{\
	int i = 0;\
	for(; *(pBuf+i); i++);\
	return i;	\
\}
\f3\fs36 \cf5 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf5 		9\uc0\u65306 \u23454 \u29616 \u23383 \u31526 \u20018 \u22788 \u29702 \u20989 \u25968 strcat\
		char *my_strcat(char *pBuf1, char *pBuf2);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
\
#define SIZE	100\
char *my_strcat(char *pBuf1, char *pBuf2);\
int main(int argc, const char *argv[])\
\{\
	char buf1[SIZE] = "";\
	char buf2[SIZE] = "";\
	gets(buf1);\
	gets(buf2);\
	printf("my_strcat(buf1, buf2) = %s\\n", my_strcat(buf1, buf2));\
	return 0;\
\} \
\
char *my_strcat(char *pBuf1, char *pBuf2)\
\{\
	int i = 0;\
	int j = 0;\
	for (i=0; *(pBuf1+i); i++);\
	for (j=0; *(pBuf2+j); j++)\{\
		*(pBuf1+i+j) = *(pBuf2+j);\
	\}\
	*(pBuf1+i+j) = *(pBuf2+j);\
	return pBuf1;\
\}
\f3\fs36 \cf5 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf5 		10\uc0\u65306 \u23454 \u29616 \u23383 \u31526 \u20018 \u22788 \u29702 \u20989 \u25968 strcpy\
		char *my_strcpy(char *pBuf1, char *pBuf2);\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf3 \
#define SIZE	100\
char *my_strcpy(char *pBuf1, char *pBuf2);\
int main(int argc, const char *argv[])\
\{\
	char buf1[SIZE] = "";\
	char buf2[SIZE] = "";\
	gets(buf1);\
	gets(buf2);\
	printf("my_strcpy(buf1, buf2) = %s\\n", my_strcpy(buf1, buf2));\
	return 0;\
\} \
\
char *my_strcpy(char *pBuf1, char *pBuf2)\
\{\
	int j = 0;\
	for (j=0; *(pBuf2+j); j++)\{\
		*(pBuf1+j) = *(pBuf2+j);\
	\} \
	*(pBuf1+j) = *(pBuf2+j);\
	return pBuf1;\
\}
\f3\fs36 \cf5 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf5 		11\uc0\u65306 \u23454 \u29616 \u23383 \u31526 \u20018 \u22788 \u29702 \u20989 \u25968 strcmp\
		int my_strcmp(char *pBuf1, char *pBuf2);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
\
#define SIZE	100\
int my_strcmp(char *pBuf1, char *pBuf2);\
int main(int argc, const char *argv[])\
\{\
	char buf1[SIZE] = "";\
	char buf2[SIZE] = "";\
	gets(buf1);\
	gets(buf2);\
	printf("my_strcmp(buf1, buf2) = %d\\n", my_strcmp(buf1, buf2));\
	return 0;\
\} \
\
int my_strcmp(char *pBuf1, char *pBuf2)\
\{\
	int i = 0;\
	for (i=0; *(pBuf1+i) && *(pBuf2+i); i++)\{\
		if (*(pBuf1+i) != *(pBuf2+i))\{\
			break;\
		\}\
	\}\
	return *(pBuf1+i) - *(pBuf2+i);\
\}
\f3\fs36 \cf5 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf5 		12\uc0\u65306 \u23454 \u29616 \u23383 \u31526 \u20018 \u22788 \u29702 \u20989 \u25968 strchr\
		char *my_strchr(char *pBuf, char ch);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
\
#define SIZE	100\
char *my_strchr(char *pBuf, char ch);\
int main(int argc, const char *argv[])\
\{\
	char buf[SIZE] = "";\
	char ch = 0;\
	gets(buf);\
	ch = getchar();\
	printf("my_strchr(buf, ch) = %s\\n", my_strchr(buf, ch));\
	return 0;\
\} \
\
char *my_strchr(char *pBuf, char ch)\
\{\
	int i = 0;\
	for (i=0; *(pBuf+i); i++)\{\
		if (*(pBuf+i) == ch)\{\
			break;\
		\}\
	\}\
	return (*(pBuf+i)?pBuf+i:NULL);\
\}
\f3\fs36 \cf5 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf5 		13\uc0\u65306 \u23454 \u29616 \u23383 \u31526 \u20018 \u22788 \u29702 \u20989 \u25968 strstr\
char *my_strstr(char *pBuf1, char *pBuf2);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
\
#define SIZE	100\
char *my_strstr(char *pBuf1, char *pBuf2);\
int main(int argc, const char *argv[])\
\{\
	char buf1[SIZE] = "";\
	char buf2[SIZE] = "";\
	gets(buf1);\
	gets(buf2);\
	printf("my_strstr(buf1, buf2) = %s\\n", my_strstr(buf1, buf2));\
	return 0;\
\} \
\
char *my_strstr(char *pBuf1, char *pBuf2)\
\{\
	int i = 0;\
	int j = 0;\
	for (i=0; *(pBuf1+i); i++)\{\
		for (j=0; *(pBuf2+j); j++)\{\
			if (*(pBuf1+i+j) != *(pBuf2+j))\{\
				break;\
			\}\
		\}\
		if (!*(pBuf2+j))\{\
			break;\
		\}\
	\}\
	return (*(pBuf2+j)?NULL:pBuf1+i);\
\}
\f3\fs36 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 		\cf6 14:\uc0\u32473 \u23450 \u19968 \u20010 \u33521 \u25991 \u21477 \u23376 \u65292 \u21333 \u35789 \u20043 \u38388 \u29992 1\u20010 \u31354 \u26684 \u20998 \u24320 \u65292 \u27714 \u20854 \u20013 \u25152 \u26377 \u21333 \u35789 \u30340 \u25968 \u37327 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
#include <string.h>\
\
#define SIZE	100\
int totalWord(char *pBuf);\
int main(int argc, const char *argv[])\
\{\
	char buf[SIZE] = "";\
	gets(buf);\
	printf("totalWord(buf) = %d\\n", totalWord(buf));\
	return 0;\
\} \
\
int totalWord(char *pBuf)\
\{\
	int i = 1;\
	for (; (pBuf=strchr(pBuf, ' ')); pBuf++, i++);\
	return i;\
\}
\f3\fs36 \cf6 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf6 		15:\uc0\u21024 \u38500 \u23383 \u31526 \u20018 \u20013 \u30340 \u25968 \u23383 \u23383 \u31526 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
#include <string.h>\
\
#define SIZE	100\
char *deleteNuch(char *pBuf);\
int main(int argc, const char *argv[])\
\{\
	char buf[SIZE] = "";\
	gets(buf);\
	printf("deleteNuch(buf) = %s\\n", deleteNuch(buf));\
	return 0;\
\} \
\
char *deleteNuch(char *pBuf)\
\{\
	char *pStart = pBuf;\
	char *pCp = NULL;\
	for (; *pBuf; pBuf++)\{//
\f1 \'b1\'e9\'c0\'fa
\f2 buf\
		if ((*pBuf>='0') && (*pBuf<='9'))\{//
\f1 \'d5\'d2\'b5\'bd\'ca\'fd\'d7\'d6\'d7\'d6\'b7\'fb
\f2 \
			for (pCp=pBuf; *pCp; pCp++)\{//
\f1 \'d1\'ad\'bb\'b7\'c7\'b0\'d2\'c6
\f2 \
				*pCp = *(pCp+1);\
			\}\
			pBuf--;\
		\}\
	\}\
	return pStart;\
\}
\f3\fs36 \cf6 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf6 		16:\uc0\u23558 \u23383 \u31526 \u20018 \u20013 \u36830 \u32493 \u20986 \u29616 \u30340 \u31354 \u26684 \u65288 \u20004 \u20010 \u20197 \u19978 \u65289 \u21512 \u24182 \u25104 \u19968 \u20010 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
#include <string.h>\
\
#define SIZE	100\
char *deleteSpace(char *pBuf);\
int main(int argc, const char *argv[])\
\{\
	char buf[SIZE] = "";\
	gets(buf);\
	printf("deleteSpace(buf) = %s\\n", deleteSpace(buf));\
	return 0;\
\} \
\
char *deleteSpace(char *pBuf)\
\{\
	char *pStart = pBuf;\
	char *pCp = NULL;\
	for (; (pBuf = strstr(pBuf, "  ")); pBuf++)\{//
\f1 \'d4\'da\'d7\'d6\'b7\'fb\'b4\'ae\'d6\'d0\'b2\'e9\'d5\'d2\'c1\'ac\'d0\'f8\'bf\'d5\'b8\'f1
\f2 \
		for (pCp=pBuf; *pCp; pCp++)\{//
\f1 \'d1\'ad\'bb\'b7\'c7\'b0\'d2\'c6
\f2 \
			*pCp = *(pCp+1);\
		\}\
		pBuf--;\
	\}\
	return pStart;\
\}
\f3\fs36 \cf6 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf6 		17:\uc0\u25214 \u20986 \u23383 \u31526 \u20018 \u20013 \u39318 \u27425 \u21482 \u20986 \u29616 \u19968 \u27425 \u30340 \u23383 \u31526 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
#include <string.h>\
\
#define SIZE	100\
char findOnlyFirstCh(char *pBuf);\
int main(int argc, const char *argv[])\
\{\
	char buf[SIZE] = "";\
	gets(buf);\
	printf("findOnlyFirstCh(buf) = %c\\n", findOnlyFirstCh(buf));\
	return 0;\
\} \
\
char findOnlyFirstCh(char *pBuf)\
\{\
	char *pCp = pBuf;\
	char *pStart = pBuf;\
	int t = 0;\
	for (; *pBuf; pBuf++)\{//
\f1 \'b1\'e9\'c0\'fa
\f2 buf\
		for (pCp=pStart, t=0; *pCp; pCp++)\{//
\f1 \'b1\'e9\'c0\'fa
\f2 buf\
			if (*pBuf == *pCp)\{//
\f1 \'d5\'d2\'b5\'bd\'b8\'c3\'d7\'d6\'b7\'fb
\f2 \
				t++;	//
\f1 \'bc\'c6\'ca\'fd
\f2 \
			\}\
		\}\
		if (t == 1)\{//
\f1 \'ca\'d7\'b4\'ce\'b3\'f6\'cf\'d6\'d2\'bb\'b4\'ce
\f2 \
			return *pBuf;		\
		\}\
	\}\
	return 0;\
\}
\f3\fs36 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f1\fs48 \cf0 	5:\'ba\'af\'ca\'fd\'b2\'ce\'ca\'fd\'ca\'c7\'d6\'b8\'d5\'eb\'ca\'fd\'d7\'e9//\'ca\'b5\'b2\'ce\'a3\'ba\'ca\'fd\'d7\'e9\'c3\'fb//\'d0\'ce\'b2\'ce\'a3\'ba\'ca\'fd\'d7\'e9\'c3\'fb\
	//char *pArr[5]\'a1\'aa\'a1\'aa>//pArr, 5//char *pArr[], int nArr\
	
\f3\fs36 \uc0\u32451 \u20064 \u65306 \
		1:5\uc0\u20010 \u23383 \u31526 \u20018 \u25214 \u20986 \u26368 \u22823 \u30340 \u23383 \u31526 \u20018 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
#include <string.h>\
#include <stdlib.h>\
\
#define NUM		5\
#define SIZE	100\
char *maxBuf(char *pArr[], int nArr);\
void input(char *pArr[], int nArr);\
int main(int argc, const char *argv[])\
\{\
	char *pArr[NUM] = \{malloc(SIZE), malloc(SIZE), malloc(SIZE), malloc(SIZE), malloc(SIZE)\};\
	int i = 0;\
	input(pArr, NUM);\
	printf("maxBuf(pArr, NUM) = %s\\n", maxBuf(pArr, NUM));\
	for (i=0; i<NUM; i++)\{\
		free(pArr[i]);\
	\}\
	return 0;\
\} \
\
void input(char *pArr[], int nArr)\
\{\
	int i = 0;\
	for (i=0; i<nArr; i++)\{\
		gets(pArr[i]);\
	\}\
\}\
\
char *maxBuf(char *pArr[], int nArr)\
\{\
	int i = 0;\
	char *pMax = NULL;\
	for (i=0, pMax=pArr[0]; i<nArr; i++)\{\
		if (strcmp(pArr[i], pMax) > 0)\{\
			pMax = pArr[i];\
		\}\
	\}\
	return pMax;\
\}
\f3\fs36 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 		2\uc0\u65306 \u23454 \u29616 \u20116 \u20010 \u23383 \u31526 \u20018 \u30340 \u25490 \u24207 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
#include <string.h>\
#include <stdlib.h>\
\
#define NUM		5\
#define SIZE	100\
void input(char *pArr[], int nArr);\
void output(char *pArr[], int nArr);\
void sortBuf(char *pArr[], int nArr);\
int main(int argc, const char *argv[])\
\{\
	char *pArr[NUM] = \{malloc(SIZE), malloc(SIZE), malloc(SIZE), malloc(SIZE), malloc(SIZE)\};\
	int i = 0;\
	input(pArr, NUM);\
	sortBuf(pArr, NUM);\
	output(pArr, NUM);\
	for (i=0; i<NUM; i++)\{\
		free(pArr[i]);\
	\}\
	return 0;\
\} \
\
void input(char *pArr[], int nArr)\
\{\
	int i = 0;\
	for (i=0; i<nArr; i++)\{\
		gets(pArr[i]);\
	\}\
\}\
void output(char *pArr[], int nArr)\
\{\
	int i = 0;\
	for (i=0; i<nArr; i++)\{\
		puts(pArr[i]);\
	\}\
\}\
\
void sortBuf(char *pArr[], int nArr)\
\{\
	int i = 0;\
	int j = 0;\
	char *pTmp = 0;\
	for (j=0; j<nArr; j++)\{//
\f1 \'c3\'b0\'c5\'dd\'d6\'b4\'d0\'d0\'b4\'ce\'ca\'fd
\f2 \
	for (i=0; i<nArr-1; i++)\{//
\f1 \'c3\'b0\'c5\'dd
\f2 \
		if (strcmp(pArr[i], pArr[i+1]) > 0)\{//
\f1 \'cf\'ec\'c1\'e5\'b3\'c9\'d4\'b1\'b1\'c8\'bd\'cf
\f2 \
			pTmp = pArr[i];//
\f1 \'bd\'bb\'bb\'bb
\f2 \
			pArr[i] = pArr[i+1];\
			pArr[i+1] = pTmp;	\
		\}\
	\}\
	\}\
\}
\f1 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 	6:\'ba\'af\'ca\'fd\'b2\'ce\'ca\'fd\'ca\'c7\'b6\'fe\'bc\'b6\'d6\'b8\'d5\'eb\
	//char *pArr[5]\'a1\'aa\'a1\'aa>//pArr(&pArr[0]), 5//char **pp, int n\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f3\fs36 \cf0 	\uc0\u32451 \u20064 \u65306 \
		1:5\uc0\u20010 \u23383 \u31526 \u20018 \u25214 \u20986 \u26368 \u22823 \u30340 \u23383 \u31526 \u20018 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
#include <string.h>\
#include <stdlib.h>\
\
#define NUM		5\
#define SIZE	100\
char *maxBuf(char **pp, int nArr);\
void input(char **pp, int nArr);\
int main(int argc, const char *argv[])\
\{\
	char *pArr[NUM] = \{malloc(SIZE), malloc(SIZE), malloc(SIZE), malloc(SIZE), malloc(SIZE)\};\
	int i = 0;\
	input(pArr, NUM);\
	printf("maxBuf(pArr, NUM) = %s\\n", maxBuf(pArr, NUM));\
	for (i=0; i<NUM; i++)\{\
		free(pArr[i]);\
	\}\
	return 0;\
\} \
\
void input(char **pp, int nArr)\
\{\
	int i = 0;\
	for (i=0; i<nArr; i++)\{\
		gets(*(pp+i));\
	\}\
\}\
\
char *maxBuf(char **pp, int nArr)\
\{\
	int i = 0;\
	char *pMax = NULL;\
	for (i=0, pMax=*(pp+0); i<nArr; i++)\{\
		if (strcmp(*(pp+i), pMax) > 0)\{\
			pMax = *(pp+i);\
		\}\
	\}\
	return pMax;\
\}
\f3\fs36 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 		2\uc0\u65306 \u23454 \u29616 \u20116 \u20010 \u23383 \u31526 \u20018 \u30340 \u25490 \u24207 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f2\fs48 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
#include <string.h>\
#include <stdlib.h>\
\
#define NUM		5\
#define SIZE	100\
void input(char **ppArr, int nArr);\
void output(char **ppArr, int nArr);\
void sortBuf(char **ppArr, int nArr);\
int main(int argc, const char *argv[])\
\{\
	char *pArr[NUM] = \{malloc(SIZE), malloc(SIZE), malloc(SIZE), malloc(SIZE), malloc(SIZE)\};\
	int i = 0;\
	input(pArr, NUM);\
	sortBuf(pArr, NUM);\
	output(pArr, NUM);\
	for (i=0; i<NUM; i++)\{\
		free(pArr[i]);\
	\}\
	return 0;\
\} \
\
void input(char **ppArr, int nArr)\
\{\
	int i = 0;\
	for (i=0; i<nArr; i++)\{\
		gets(*(ppArr+i));\
	\} \
\}\
void output(char **ppArr, int nArr)\
\{\
	int i = 0;\
	for (i=0; i<nArr; i++)\{\
		puts(*(ppArr+i));\
	\}\
\}\
\
void sortBuf(char **ppArr, int nArr)\
\{\
	int i = 0;\
	int j = 0;\
	char *pTmp = 0;\
	for (j=0; j<nArr; j++)\{//
\f1 \'c3\'b0\'c5\'dd\'d6\'b4\'d0\'d0\'b4\'ce\'ca\'fd
\f2 \
		for (i=0; i<nArr-1; i++)\{//
\f1 \'c3\'b0\'c5\'dd
\f2 \
			if (strcmp(*(ppArr+i), *(ppArr+i+1)) > 0)\{//
\f1 \'cf\'ec\'c1\'e5\'b3\'c9\'d4\'b1\'b1\'c8\'bd\'cf
\f2 \
				pTmp = *(ppArr+i);//
\f1 \'bd\'bb\'bb\'bb
\f2 \
				*(ppArr+i) = *(ppArr+i+1);\
				*(ppArr+i+1) = pTmp;	\
			\}\
		\}\
	\}\
\}
\f1 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 	7:\'ba\'af\'ca\'fd\'b2\'ce\'ca\'fd\'ca\'c7\'bd\'e1\'b9\'b9\'cc\'e5\'b1\'e4\'c1\'bf\
	8:\'ba\'af\'ca\'fd\'b2\'ce\'ca\'fd\'ca\'c7\'bd\'e1\'b9\'b9\'cc\'e5\'ca\'fd\'d7\'e9\'c3\'fb\
\
12:\'ba\'af\'ca\'fd\'d6\'b8\'d5\'eb\'ba\'cd\'d6\'b8\'d5\'eb\'ba\'af\'ca\'fd\
	\'ba\'af\'ca\'fd\'d6\'b8\'d5\'eb\'a3\'ba\'ba\'af\'ca\'fd\'d6\'b8\'d5\'eb\'ca\'c7\'d6\'b8\'d5\'eb\'a3\'ac\'d6\'b8\'d5\'eb\'d3\'c3\'c0\'b4\'b1\'a3\'b4\'e6\'ba\'af\'ca\'fd\'b5\'c4\'b5\'d8\'d6\'b7\
	\'d6\'b8\'d5\'eb\'ba\'af\'ca\'fd\'a3\'ba\'d6\'b8\'d5\'eb\'ba\'af\'ca\'fd\'ca\'c7\'ba\'af\'ca\'fd\'a3\'ac\'ba\'af\'ca\'fd\'b5\'c4\'b7\'b5\'bb\'d8\'d6\'b5\'ca\'c7\'d6\'b8\'d5\'eb\'c0\'e0\'d0\'cd\
	\'b6\'a8\'d2\'e5\'a3\'ba\
	int add(int a, int b);\
	int (*p)(int a, int b)* = add;\
	char *my_strcat(char *p1, char *p2);\
	char *(*p)(char *p1, char *p2) = my_strcat;\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f2 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf3 \
int min(int a, int b)\
\{\
	return a<b?a:b;\
\}\
int max(int a, int b)\
\{\
	return a>b?a:b;\
\}\
\
int main(int argc, const char *argv[])\
\{\
	int (*p)(int a, int b) = NULL;\
	p = min;\
	printf("min(3, 5) = %d\\n", p(3, 5));//min\
	p = max;\
	printf("max(3, 5) = %d\\n", p(3, 5));//max\
	return 0;\
\} 
\f1 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 	\
13:main\'ba\'af\'ca\'fd\'b5\'c4\'b2\'ce\'ca\'fd\
	
\f2 \cf3 \cb0 \CocoaLigature0 #include <stdio.h>\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf3 \
int main(int argc, const char **argv)\
\{\
	int i = 0;\
	for (i=0; i<argc; i++)\{\
		printf("argv[%d] = %s\\n", i, *(argv+i));\
	\}\
	return 0;\
\} 
\f1 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
	\'d7\'dc\'bd\'e1\'a3\'ba\
	argc\'ca\'c7\'c3\'fc\'c1\'ee\'d0\'d0\'d7\'d6\'b7\'fb\'b4\'ae\'b5\'c4\'b8\'f6\'ca\'fd\
	argv\'c3\'fc\'c1\'ee\'d0\'d0\'d7\'d6\'b7\'fb\'b4\'ae\'b5\'c4\'b5\'d8\'d6\'b7\
\
\
\
\
\
\
}